q()
install.packages("e1071")
install.packages("DESeq")
R.version
R.version
install.packages("DESeq")
install.packages("DESeq2")
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
source("https://bioconductor.org/biocLite.R")
install.packages("data.table")
install.packages("forecast")
install.packages("foreach")
install.packages("doParallel")
install.packages("iterators")
install.packages("~/R/Packages/doParallel_1.0.10.tar.gz", repos = NULL, type="source")
setwd("~/PA_course/Parallel-Processing_backup/R_solution/src")
data =  read.table("../data/twitter_combined.txt", sep = " ")
data = data[order(data[,1]),]
head(data)
for (i in 1:nrow(data)) {
row = data[i,]
indexes = which(data[,1] == row[2])
if (length(indexes) > 0) {
cat(i,"\n")
for (index in indexes) {
if(data[index,2] == row[1]) {
cat("found")
cat(index)
break
}
}
}
}
i=1
i+=2
score = 0
for (i in 1:nrow(data)) {
row = data[i,]
indexes = which(data[,1] == row[2])
if (i%%20000) {cat(i,"\n")}
if (length(indexes) > 0) {
cat(i,"\n")
for (index in indexes) {
if(data[index,2] == row[1]) {
#                        cat("found")
# 									     cat(index)
score = score +1
break
}
}
}
}
score = 0
for (i in 1:nrow(data)) {
row = data[i,]
indexes = which(data[,1] == row[2])
if (i%%20000) {cat(i,"\n")}
if (length(indexes) > 0) {
cat(i,"\n")
for (index in indexes) {
if(data[index,2] == row[1]) {
#                        cat("found")
# 									     cat(index)
score = score +1
break
}
}
}
}
score = 0
for (i in 1:nrow(data)) {
row = data[i,]
indexes = which(data[,1] == row[2])
if (i%%20000==0) {cat(i,"\n")}
if (length(indexes) > 0) {
cat(i,"\n")
for (index in indexes) {
if(data[index,2] == row[1]) {
#                        cat("found")
# 									     cat(index)
score = score +1
break
}
}
}
}
score = 0
for (i in 1:nrow(data)) {
row = data[i,]
indexes = which(data[,1] == row[2])
# if (i%%20000==0) {cat(i,"\n")}
if (length(indexes) > 0) {
cat(i,"\n")
for (index in indexes) {
if(data[index,2] == row[1]) {
#                        cat("found")
# 									     cat(index)
score = score +1
break
}
}
}
}
score = 0
for (i in 1:nrow(data)) {
row = data[i,]
indexes = which(data[,1] == row[2])
if (i%%20000==0) {cat(i,"\n")}
if (length(indexes) > 0) {
for (index in indexes) {
if(data[index,2] == row[1]) {
#                        cat("found")
# 									     cat(index)
score = score +1
break
}
}
}
}
score
for (i in 1:nrow(data)) {
row = data[i,]
indexes = which(data[,1] == row[2])
# if (i%%20000==0) {cat(i,"\n")}
if (length(indexes) > 0) {
for (index in indexes) {
if(data[index,2] == row[1]) {
cat("found")
cat(index)
score = score +1
break
}
}
}
}
i=190
row = data[i,]
row
indexes = which(data[,1] == row[2])
indexes
row[2]
which(data[,1] == 12)
which(data[,1] == row[2])
typeof(row[2])
data = data.matrix(data)
i=190
row = data[i,]
indexes = which(data[,1] == row[2])
indexes
if (length(indexes) > 0) {
for (index in indexes) {
if(data[index,2] == row[1]) {
cat("found")
cat(index)
score = score +1
break
}
}
}
for (i in 1:nrow(data)) {
row = data[i,]
indexes = which(data[,1] == row[2])
# if (i%%20000==0) {cat(i,"\n")}
if (length(indexes) > 0) {
for (index in indexes) {
if(data[index,2] == row[1]) {
cat("found")
cat(index)
score = score +1
break
}
}
}
}
score = 0
for (i in 1:nrow(data)) {
row = data[i,]
indexes = which(data[,1] == row[2])
if (i%%20000==0) {cat(i,"\n")}
if (length(indexes) > 0) {
for (index in indexes) {
if(data[index,2] == row[1]) {
#                        cat("found")
# 									     cat(index)
score = score +1
break
}
}
}
}
