q()
install.packages("e1071")
install.packages("DESeq")
R.version
R.version
install.packages("DESeq")
install.packages("DESeq2")
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
source("https://bioconductor.org/biocLite.R")
install.packages("data.table")
install.packages("forecast")
install.packages("foreach")
install.packages("doParallel")
install.packages("iterators")
install.packages("~/R/Packages/doParallel_1.0.10.tar.gz", repos = NULL, type="source")
setwd("~/tmp/Parallel-Processing/R_solution/src")
library(parallel)
source("bin_search.R")
data =  read.table("../data/twitter_combined.txt", sep = " ")
data = data[order(data[,1]),]
col1= unlist(data[,1])
data = data.matrix(data)
cls <- makePSOCKcluster(rep("localhost",4))
par_search = function(cls,data) {
rowgrps <- splitIndices(nrow(data), length(cls))
N = nrow(data)
col1= unlist(data[,1])
bin_search <- function( arr, l, r, x){
if (r>=l) {
mid = l+(r-l)%/%2
if(arr[mid] == x) return(mid)
if (arr[mid] > x)
return(bin_search(arr, l, mid-1, x))
return(bin_search(arr, mid+1,r,x))
}
return(-1)
}
grpsearch  <- function(grp)
{
score = 0
for (i in grp)
{
row = unlist(data[i,])
index = bin_search(col1,1,N,row[2])
if (index!=-1) {
found = FALSE
i = index
while (col1[i] == row[2] && i > 0) {
if (data[i,2] == row[1]) {
score = score +1
found = TRUE
break
}
i = i-1
}
if (!found) {
i=index+1
while (col1[i] == row[2] && i <=N) {
if (data[i,2] == row[1]) {
score = score +1
break
}
i = i+1
}
}
}
}
return(score)
}
mout <- clusterApply(cls, rowgrps, grpsearch)
Reduce(c, mout)
}
par_search(cls,data)
res = c(230290,214740,203562,203100)
(sum(res)-14)/2
reflexive_num = sum(data[,1]==data[,2])
reflexive_num
cls <- makePSOCKcluster(rep("localhost",6))
par_search = function(cls,data) {
rowgrps <- splitIndices(nrow(data), length(cls))
N = nrow(data)
col1= unlist(data[,1])
bin_search <- function( arr, l, r, x){
if (r>=l) {
mid = l+(r-l)%/%2
if(arr[mid] == x) return(mid)
if (arr[mid] > x)
return(bin_search(arr, l, mid-1, x))
return(bin_search(arr, mid+1,r,x))
}
return(-1)
}
grpsearch  <- function(grp)
{
score = 0
for (i in grp)
{
row = unlist(data[i,])
index = bin_search(col1,1,N,row[2])
if (index!=-1) {
found = FALSE
i = index
while (col1[i] == row[2] && i > 0) {
if (data[i,2] == row[1]) {
score = score +1
found = TRUE
break
}
i = i-1
}
if (!found) {
i=index+1
while (col1[i] == row[2] && i <=N) {
if (data[i,2] == row[1]) {
score = score +1
break
}
i = i+1
}
}
}
}
return(score)
}
mout <- clusterApply(cls, rowgrps, grpsearch)
Reduce(c, mout)
}
ptm<-proc.time()
par_search(cls,data)
print(proc.time() - ptm)
res = c(230290,214740,203562,203100)
cls <- makePSOCKcluster(rep("localhost",8))
par_search = function(cls,data) {
rowgrps <- splitIndices(nrow(data), length(cls))
N = nrow(data)
col1= unlist(data[,1])
bin_search <- function( arr, l, r, x){
if (r>=l) {
mid = l+(r-l)%/%2
if(arr[mid] == x) return(mid)
if (arr[mid] > x)
return(bin_search(arr, l, mid-1, x))
return(bin_search(arr, mid+1,r,x))
}
return(-1)
}
grpsearch  <- function(grp)
{
score = 0
for (i in grp)
{
row = unlist(data[i,])
index = bin_search(col1,1,N,row[2])
if (index!=-1) {
found = FALSE
i = index
while (col1[i] == row[2] && i > 0) {
if (data[i,2] == row[1]) {
score = score +1
found = TRUE
break
}
i = i-1
}
if (!found) {
i=index+1
while (col1[i] == row[2] && i <=N) {
if (data[i,2] == row[1]) {
score = score +1
break
}
i = i+1
}
}
}
}
return(score)
}
mout <- clusterApply(cls, rowgrps, grpsearch)
Reduce(c, mout)
}
ptm<-proc.time()
scores = par_search(cls,data)
print(proc.time() - ptm)
res = (sum(scores)-reflexive_num)/2
res
cls <- makePSOCKcluster(rep("localhost",2))
par_search = function(cls,data) {
rowgrps <- splitIndices(nrow(data), length(cls))
N = nrow(data)
col1= unlist(data[,1])
bin_search <- function( arr, l, r, x){
if (r>=l) {
mid = l+(r-l)%/%2
if(arr[mid] == x) return(mid)
if (arr[mid] > x)
return(bin_search(arr, l, mid-1, x))
return(bin_search(arr, mid+1,r,x))
}
return(-1)
}
grpsearch  <- function(grp) {
score = 0
for (i in grp)
{
row = unlist(data[i,])
index = bin_search(col1,1,N,row[2])
if (index!=-1) {
found = FALSE
i = index
while (col1[i] == row[2] && i > 0) {
if (data[i,2] == row[1]) {
score = score +1
found = TRUE
break
}
i = i-1
}
if (!found) {
i=index+1
while (col1[i] == row[2] && i <=N) {
if (data[i,2] == row[1]) {
score = score +1
break
}
i = i+1
}
}
}
}
return(score)
}
mout <- clusterApply(cls, rowgrps, grpsearch)
Reduce(c, mout)
}
ptm<-proc.time()
scores = par_search(cls,data)
print(proc.time() - ptm)
res = (sum(scores)-reflexive_num)/2
